# Copyright (c) 2018-2019 The Ion developers
# Copyright (c) 2018-2019 The Bytz developers
name: bytz
base: core18
version: 0.1.99
summary:   gaming related peer-to-peer network based digital currency
description: |
  Bytz is an MIT licensed,  open source, gaming oriented,
  blockchain-based cryptocurrency with ultra fast transactions,
  low fees, high network decentralization, and Zero Knowledge
  cryptography proofs for industry-leading transaction anonymity.
  
  This package includes following binaries:
  
    bytzd, bytz-cli, bytz-tx, bytz-qt, test_bytz, test_bytz-qt
  
  Default homefolder:
  
    ~/snap/bytz/common/.bytz
  
  How to launch snap binaries in terminal?:
  
    bytz.qt     - launches Bytz QT (bytz-qt)
    bytz.daemon - launches Bytz daemon (bytzd)
    bytz.cli    - launches Bytz RPC (bytz-cli)
    bytz.tx     - launches Bytz bytz-tx utility (bytz-tx)
    test           - launches test_bytz
    testqt         - launches test_bytz-qt
  
  Additional launchers for tegtest and testnet:
  
    bytz.qt-testnet     - launches Bytz QT with testnet=1
    bytz.daemon-testnet - launches Bytz daemon with testnet=1
    bytz.cli-testnet    - launches Bytz RPC with testnet=1
  
    bytz.qt-regtest     - launches Bytz QT with regtest=1
    bytz.daemon-regtest - launches Bytz daemon with regtest=1
    bytz.cli-regtest    - launches Bytz RPC with regtest=1
  
  Documentation and wiki:
  
  - Wiki (Bytz):    https://github.com/bytzcurrency/bytz/wiki
grade: devel
confinement: strict
icon: src/qt/res/src/bytz.svg
apps:
  daemon:
    command: bytzd
    plugs: [network, network-bind, network-status, home, removable-media]
    desktop: bytzd.desktop
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  daemon-testnet:
    command: bytzd --testnet
    plugs: [network, network-bind, network-status, home, removable-media]
    desktop: bytzd_testnet.desktop
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  daemon-regtest:
    command: bytzd --regtest
    desktop: bytzd_regtest.desktop
    plugs: [network, network-bind, network-status, home, removable-media]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  qt:
    command: bytz-qt
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: bytz-qt.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  qt-testnet:
    command: bytz-qt --testnet
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: bytz-qt_testnet.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  qt-regtest:
    command: bytz-qt --regtest
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: bytz-qt_regtest.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  cli:
    command: bytz-cli
    plugs: [network, network-bind, network-status, home]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  cli-testnet:
    command: bytz-cli --testnet
    plugs: [network, network-bind, home]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  cli-regtest:
    command: bytz-cli --regtest
    plugs: [network, network-bind, home]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  tx:
    command: bytz-tx
    plugs: [home]
  test:
    command: test_bytz
    plugs: [home]
  testqt:
    command: test_bytz-qt
    plugs: [home]
parts:
  bytz:
    source: https://github.com/bytzcurrency/bytz
    source-type: git
    source-tag: master
    plugin: nil
    override-build: |
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "CUSTOM SETTINGS"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      #    use overrife prefix if binaries differ from project name, for ion it does,
      #    project is called bytz because ion exists already as package. For anybody
      #    offering non official release and using own SNAP, this var should be used
      #      default value is "false", to enable it, use binary prefex, for us it is ion
      OVERRIDEBINPREFIX="bytz"
      OVERRIDEDATADIR="bytz"
      OVERRIDECONF="${OVERRIDEDATADIR}"
      JOBS=4
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "SET OVERRIDE VARIABLES IF SET" # checks OVERRIDEBINPREFIX, OVERRIDEDATADIR and OVERRIDECONF
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      if [ $OVERRIDEBINPREFIX = "false" ]; then
        BINPREF="${SNAPCRAFT_PROJECT_NAME}"
      else
        BINPREF="${OVERRIDEBINPREFIX}"
      fi
      if [ $OVERRIDEDATADIR = "false" ]; then
        DATADIR="${SNAPCRAFT_PROJECT_NAME}"
      else
        DATADIR="${OVERRIDEDATADIR}"
      fi
      if [ $OVERRIDECONF = "false" ]; then
        CONF="${SNAPCRAFT_PROJECT_NAME}"
      else
        CONF="${OVERRIDECONF}"
      fi
      echo "BINPREF VARIABLE - ${BINPREF}"
      echo "DATADIR VARIABLE - ${DATADIR}"
      echo "CONF VARIABLE - ${CONF}"
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "OVERRIDE ARCHITECTURE" # applies currently only on i386,  for i386 architecture, we will use i686-linux-gnu to compile dependencies
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      if [ $SNAPCRAFT_ARCH_TRIPLET = "i386-linux-gnu" ]; then
        HOST="i686-linux-gnu"
      else
        HOST="${SNAPCRAFT_ARCH_TRIPLET}"
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "APPLY PATCHES ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # patches which have to be applied for compilation, replace splash screen
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      cd ${SNAPCRAFT_PART_BUILD}
      echo "apply patches:"
      git apply $SNAPCRAFT_PART_BUILD/snap/local/patches/X001-default_data_dir.patch
      git apply $SNAPCRAFT_PART_BUILD/snap/local/patches/X002-fix-bdb-tmp-folder.patch
      git apply $SNAPCRAFT_PART_BUILD/snap/local/patches/X003-fix-use-snap-instead-of-dirty.patch
      sed -i 's/tar --strip-components/tar --no-same-owner --strip-components/' ${SNAPCRAFT_PART_BUILD}/depends/funcs.mk
      echo "replace splash screen with snapcrafts"
      cp -f $SNAPCRAFT_PART_BUILD/contrib/snap/images/splash.png $SNAPCRAFT_PART_BUILD/src/qt/res/images/splash.png
      cp -f $SNAPCRAFT_PART_BUILD/contrib/snap/images/splash_regtest.png $SNAPCRAFT_PART_BUILD/src/qt/res/images/splash_regtest.png
      cp -f $SNAPCRAFT_PART_BUILD/contrib/snap/images/splash_testnet.png $SNAPCRAFT_PART_BUILD/src/qt/res/images/splash_testnet.png
      cp -f $SNAPCRAFT_PART_BUILD/contrib/snap/icons/favicon.ico $SNAPCRAFT_PART_BUILD/share/pixmaps/favicon.ico
      cp -f $SNAPCRAFT_PART_BUILD/contrib/snap/icons/favicon_testnet.ico $SNAPCRAFT_PART_BUILD/share/pixmaps/favicon_testnet.ico
      cp -f $SNAPCRAFT_PART_BUILD/contrib/snap/icons/favicon_regtest.ico $SNAPCRAFT_PART_BUILD/share/pixmaps/favicon_regtest.ico
      cp -f $SNAPCRAFT_PART_BUILD/snap/local/desktop/${BINPREF}.png $SNAPCRAFT_PART_BUILD/src/qt/res/icons/${BINPREF}.png
      cp -f $SNAPCRAFT_PART_BUILD/snap/local/desktop/${BINPREF}_testnet.png $SNAPCRAFT_PART_BUILD/src/qt/res/icons/${BINPREF}_testnet.png
      cp -f $SNAPCRAFT_PART_BUILD/snap/local/desktop/${BINPREF}_regtest.png $SNAPCRAFT_PART_BUILD/src/qt/res/icons/${BINPREF}_regtest.png
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "BUILD DEPENDENCIES"
      echo "PRECOMPILE ${SNAPCRAFT_ARCH_TRIPLET} DEPENDENCIES FOR ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # cd to depends folder, download and precompile
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      cd ${SNAPCRAFT_PART_BUILD}/depends
      make download-linux
      make -j${JOBS} HOST=${HOST}
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "CONFIGURATION OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # run configure with prefix to include depends
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      cd ${SNAPCRAFT_PART_BUILD}
      echo "Configure and build ${BINPREF}"
      ./autogen.sh
      ./configure --prefix=`pwd`/depends/${HOST}
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "COMPILATION OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # run make to compile using -j
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      make -j${JOBS}
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "INSTALLATION OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # run make install with a prefix where to install
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      make install prefix=${SNAPCRAFT_PART_INSTALL}
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "POST INSTALL SCRIPTS OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # run make install with a prefix where to install
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      if [ $SNAPCRAFT_ARCH_TRIPLET = "powerpc64le-linux-gnu" ]; then
        if [ -e $SNAPCRAFT_PART_BUILD/src/qt/${BINPREF}-qt ]; then
          echo "PPC64EL fix - ${BINPREF}-qt exists, fix unrequired"
        else
          echo "echo ${BINPREF}-qt is not installed" > ${SNAPCRAFT_PART_INSTALL}/usr/bin/${BINPREF}-qt
          chmod +x ${SNAPCRAFT_PART_INSTALL}/usr/bin/${BINPREF}-qt
          echo "PPC64EL fix - ${BINPREF}-qt does not exist, fix required, dummy as ${BINPREF}-qt"
        fi
        if [ -e $SNAPCRAFT_PART_BUILD/src/qt/test/test_${BINPREF}-qt ]; then
          echo "PPC64EL fix - test_${BINPREF}-qt exists, fix unrequired"
        else
          echo "echo test_${BINPREF}-qt is not installed" > ${SNAPCRAFT_PART_INSTALL}/usr/bin/test_${BINPREF}-qt
          chmod +x ${SNAPCRAFT_PART_INSTALL}/usr/bin/test_${BINPREF}-qt
          echo "PPC64EL fix - test_${BINPREF}-qt does not exist, fix required, dummy as test_${BINPREF}-qt"
        fi
        if [ -e $SNAPCRAFT_PART_BUILD/src/test/test_${BINPREF} ]; then
          echo "PPC64EL fix - test_${BINPREF} exists, fix unrequired"
        else
          echo "echo test_${BINPREF} is not installed" > ${SNAPCRAFT_PART_INSTALL}/usr/bin/test_${BINPREF}
          chmod +x ${SNAPCRAFT_PART_INSTALL}/usr/bin/test_${BINPREF}
          echo "PPC64EL fix - test_${BINPREF} does not exist, fix required, dummy as test_${BINPREF}"
        fi
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "CONFIG FILE" # create .bytz folder and copy example config - !!!warning!!!: do not copy as bytz.conf
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      mkdir -p ${SNAP_USER_COMMON}/.${DATADIR}
      cp ${SNAPCRAFT_PART_BUILD}/debian/manpages/${CONF}.conf.5 ${SNAP_USER_COMMON}/.${DATADIR}/${CONF}-example.conf
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "INSTALATION OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}-snap has finished" # List installed files and vars when installation is finished
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      find ${SNAPCRAFT_PART_INSTALL} -type f
      env
      echo "-----------------------------------------------+"
    build-packages:
      - curl
      - wget
      - gcc
      - gcc-8
      - g++
      - g++-8
      - make
      - autoconf
      - automake
      - cmake
      - pkg-config
      - libtool
      - bsdmainutils
      - binutils
      - python3
      - help2man
      - doxygen
    stage-packages:
      - libxkbcommon0
      - ttf-ubuntu-font-family
      - dmz-cursor-theme
      - light-themes
      - shared-mime-info
      - libqt5gui5
      - libgdk-pixbuf2.0-0
      - libqt5svg5 # for loading icon themes which are svg
      - locales-all
      - qtwayland5
      - ca-certificates
    after:
      - patches
  patches:
    source: snap/local/patches
    plugin: dump
    prime:
      - -*
  desktop:
    source: snap/local/desktop
    plugin: dump